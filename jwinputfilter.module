<?php


define("SOCJWPLAYERCODEKEY","<script type='text/javascript'>jwplayer.key='JWKEY';</script>");

define("SOCJWCODESNIPPET", "
	<div id='DIVID'>Loading player</div>
	<script type='text/javascript'>
		jwplayer('DIVID').setup({
			file: 'VIDEOFILE',
			image: 'IMAGEFILE',
			width: WIDTH,
			height: HEIGHT
		});
</script>");


define("SOCJWCODESNIPPETversion2", "
    <div id='DIVID'>Loading player</div>
    <script type='text/javascript'>
        jwplayer('DIVID').setup({
            file: 'VIDEOFILE',
            image: 'IMAGEFILE',
            width: 'WIDTH',
            aspectratio: 'RATIO'

        });
</script>");




function jwinputfilter_filter_info() {

    $filters['filter_soc_jwplayer'] = array(
        'title' => t('JWPlayer embed code'),
        'description' => t('Replaces [JW:Video.mp4|Picture.jpg|WidthxHeight] with the javascript/HTML to produce a JW player'),
        'process callback' => 'jwinputfilter_filterprocess',
        'tips callback' => 'jwinputfilter_filter_tips',
        'settings callback' =>'_jwinputfilter_settings',
        'cache' => FALSE,
    );
    return $filters;
}


function jwinputfilter_filter_tips($filter, $format, $long) {
    if ($long) {
        return t('Allows mark up as [JW:Video.mp4|Picture.jpg|WidthxHeight]' );
    }
    else {
        return t('Allows mark up as [JW:Video.mp4|Picture.jpg|WidthxHeight]' );
    }
}


function jwinputfilter_filterprocess($text, $filter, $format, $langcode, $cache, $cache_id) {



    preg_match_all("/\[JW:(.*)\|(.*)\|(.*)\]/", $text, $matches);

    /*
     * Get number of videos found and begin executing the loop over each one.
     */
    $number_of_videos = count($matches[0]) ;
    for($i = 0; $i < $number_of_videos; ++$i) {


        // Check to see if array items exists. The first two will of course be
        // the video name and thumbnail image.
        if (isset($matches[1][$i]) && isset($matches[2][$i])) {

            // if no thumbnail, use default
            if ($matches[2][$i] == '') {
                if ( isset($filter->settings['soc_jwplayer_default_thumb_url'])) {
                    $matches[$i][2] = $filter->settings['soc_jwplayer_default_thumb_url'];
                }
            }

            $div_ID 		= 'video_' . $i;
            $fullmatch 		= trim($matches[0][$i]);
            $videoname 		= trim($matches[1][$i]);
            $thumbname 		= trim($matches[2][$i]);
            $width_default 	= "500";
            $height_default  = "330";



            /*
             * Determine width and height. The field will be given in one of two ways. The default format is
             * in a form of 500x300. The alternative newer form, is a percentage: 100%, 75%, etc.
             */
            if (isset($matches[3][$i])) {

                /*
                 * If the width field contains a percentage, use it. This requires a slight change to the processing.
                 */
                if (strpos($matches[3][$i], '{') !== FALSE) {

                    $options = json_decode($matches[3][$i], true);
                    $produce_code = SOCJWCODESNIPPETversion2;
                    $produce_code = str_replace("WIDTH", $options['width'], $produce_code);
                    $produce_code = str_replace("RATIO", $options['ratio'], $produce_code);
 


                }
                /*
                 * Segment the values specific to the older method. Match out height and width with a preg_match, use
                 * the original constant from above, and do string replace.
                 */
                else {
                    preg_match("/(\d+)x(\d+)/", $text, $dim_matches);
                    $width_default = $dim_matches[1];
                    $height_default = $dim_matches[2];
                    $produce_code = SOCJWCODESNIPPET;
                    $produce_code = str_replace("WIDTH", $width_default, $produce_code);
                    $produce_code = str_replace("HEIGHT", $height_default, $produce_code);
                }
            }




            /*
             * Replace values used by both situations
             */
            $produce_code = str_replace("VIDEOFILE", $videoname, $produce_code);
            $produce_code = str_replace("IMAGEFILE", $thumbname, $produce_code);
            $produce_code = str_replace("DIVID", $div_ID, $produce_code);




            // If key is set, use it and append it to the whole thing for output.
            if (isset($filter->settings['soc_jwplayer_key_displayed'])) {
                $jwkey_code = str_replace("JWKEY", trim($filter->settings['soc_jwplayer_key_displayed']), SOCJWPLAYERCODEKEY);
                $produce_code =  trim($jwkey_code) . trim($produce_code);
            }

            // include JS player
            if (isset($filter->settings['soc_jwplayer_playerurl']) && (!is_null($filter->settings['soc_jwplayer_playerurl']))) {
                $server_filename	= $GLOBALS['_SERVER']['DOCUMENT_ROOT'] . '/' . $filter->settings['soc_jwplayer_playerurl'];
                $intrnt_pathname 	= $GLOBALS['_SERVER']['SERVER_NAME']  . '/' . $filter->settings['soc_jwplayer_playerurl'];

                if (file_exists($server_filename)) {
                    drupal_add_js('//' . $intrnt_pathname, array('type' => 'file', 'media' => 'all', 'preprocess' => false, 'every_page' => true));
                } else {
                    $msg = t("Tried to include //$intrnt_pathname but the file $server_filename does not exist. Please check your path");
                    drupal_set_message($msg, 'error');
                    error_log($msg);
                }
            }



            $text = str_replace($fullmatch, $produce_code, $text);

        }

    }


    return $text ;

}

/**
 * The settings function. The only option to currently set is the JW key.
 *
 */
function _jwinputfilter_settings($form, &$form_state, $filter, $format, $defaults) {
    $filter->settings += $defaults;



    $settings['soc_jwplayer_key_displayed'] = array(
        '#type' => 'textfield',
        '#title' => t('JWPlayer Input Filter Settings'),
        '#default_value' => $filter->settings['soc_jwplayer_key_displayed'],
        '#maxlength' => 1024,
        '#description' => t('The key to use in jwplayer.key=#### javascript embeded to page.'),
    );

    $settings['soc_jwplayer_playerurl'] = array(
        '#type' => 'textfield',
        '#title' => t('JWPlayer URL'),
        '#default_value' => $filter->settings['soc_jwplayer_playerurl'],
        '#maxlength' => 1024,
        '#description' => t('What is the path of the player? For example, something akin to <code>/sites/default/files/page_specific_js/jwplayer/jwplayer.j</code> Do not use starting or ending slashes.'),
    );

    /*$settings['soc_jwplayer_playerurl_html5'] = array(
        '#type' => 'textfield',
        '#title' => t('JWPlayer HTML5 URL'),
        '#default_value' => $filter->settings['soc_jwplayer_playerurl_html5'],
        '#maxlength' => 1024,
        '#description' => t('What is the path of the player? For example, something akin to <code>/sites/default/files/page_specific_js/jwplayer/jwplayer.html5.js</code> Do not use starting or ending slashes.'),
        );
*/
    $settings['soc_jwplayer_default_thumb_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Default Logo or Thumbnail'),
        '#default_value' => $filter->settings['soc_jwplayer_default_thumb_url'],
        '#maxlength' => 1024,
        '#description' => t('If no thumbnail is given, use this image. For example, something akin to "<code>sites/default/files/images/Logo.png</code>"  or a full URL such as "<code>https://server.com/images/logo.png</code>". <b>It is okay</b> to use starting or ending slashes. '),
    );

    /*$settings['soc_jwplayer_playerurl_flv'] = array(
        '#type' => 'textfield',
        '#title' => t('FLV player URL'),
        '#default_value' => $filter->settings['soc_jwplayer_playerurl_flv'],
        '#maxlength' => 1024,
        '#description' => t(''),
        );*/



    return $settings;
}
