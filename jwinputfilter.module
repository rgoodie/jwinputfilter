<?php


define('DEFAULT_JWPLAYER_URL', '//ssl.p.jwpcdn.com/player/v/7.3.0/jwplayer.js');
define("SOCJWPLAYERCODEKEY", "<script type='text/javascript'>jwplayer.key='JWKEY';</script>");

define("SOCJWCODESNIPPET", "
	<div id='DIVID'>Loading player</div>
	<script type='text/javascript'>
		jwplayer('DIVID').setup({
			file: 'VIDEOFILE',
			image: 'IMAGEFILE',
			width: WIDTH,
			height: HEIGHT
		});
</script>");


define("SOCJWCODESNIPPETversion2", "
    <div id='DIVID'>Loading player</div>
    <p>TEST</p>
    <script type='text/javascript'>
        jwplayer('DIVID').setup({
            file: 'VIDEOFILE',
            image: 'IMAGEFILE',
            width: 'WIDTH',
            height: 'HEIGHT',
            mediaid: 'MEDIAID'

        });
</script>");




function jwinputfilter_filter_info()
{

    $filters['filter_soc_jwplayer'] = array(
        'title' => t('JWPlayer embed code'),
        'description' => t('Replaces [JW:Video.mp4|Picture.jpg|WidthxHeight] with the javascript/HTML to produce a JW player'),
        'process callback' => 'jwinputfilter_filterprocess',
        'tips callback' => 'jwinputfilter_filter_tips',
        'settings callback' => '_jwinputfilter_settings',
        'cache' => FALSE,
    );
    return $filters;
}


function jwinputfilter_filter_tips($filter, $format, $long)
{
    if ($long) {
        return t('Allows mark up as [JW:Video.mp4|Picture.jpg|WidthxHeight]');
    } else {
        return t('Allows mark up as [JW:Video.mp4|Picture.jpg|WidthxHeight]');
    }
}


function jwinputfilter_filterprocess($text, $filter, $format, $langcode, $cache, $cache_id)
{


    preg_match_all("/\[JW:(.*)\|(.*)\|(.*)\]/", $text, $matches);

    /*
     * Get number of videos found and begin executing the loop over each one.
     */
    $number_of_videos = count($matches[0]);
    for ($i = 0; $i < $number_of_videos; ++$i) {


        // Check to see if array items exists. The first two will of course be
        // the video name and thumbnail image.
        if (isset($matches[1][$i]) && isset($matches[2][$i])) {

            // if no thumbnail, use default
            if ($matches[2][$i] == '') {
                if (isset($filter->settings['soc_jwplayer_default_thumb_url'])) {
                    $matches[$i][2] = $filter->settings['soc_jwplayer_default_thumb_url'];
                }
            }

            $div_ID = 'video_' . $i;
            $fullmatch = trim($matches[0][$i]);
            $videoname = trim($matches[1][$i]);
            $thumbname = trim($matches[2][$i]);
            $width_default = "500";
            $height_default = "330";


            /*
             * Determine width and height. The field will be given in one of two ways. The default format is
             * in a form of 500x300. The alternative newer form, is a percentage: 100%, 75%, etc.
             */
            if (isset($matches[3][$i])) {

                /*
                 * JSON processing preferred
                 */

                if (strpos($matches[3][$i], '{') !== FALSE) {


                    $options = json_decode($matches[3][$i], true);
                    $produce_code = SOCJWCODESNIPPETversion2;
                    $produce_code = str_replace("WIDTH", $options['width'], $produce_code);
                    $produce_code = str_replace("HEIGHT", $options['height'], $produce_code);
                    $produce_code = str_replace("RATIO", $options['ratio'], $produce_code);
                    $produce_code = str_replace("MEDIAID", $options['mediaid'], $produce_code);


                } /*
                 * Segment the values specific to the older method. Match out height and width with a preg_match, use
                 * the original constant from above, and do string replace.
                 */
                else {
                    preg_match("/(\d+)x(\d+)/", $text, $dim_matches);
                    $width_default = $dim_matches[1];
                    $height_default = $dim_matches[2];
                    $produce_code = SOCJWCODESNIPPET;
                    $produce_code = str_replace("WIDTH", $width_default, $produce_code);
                    $produce_code = str_replace("HEIGHT", $height_default, $produce_code);
                }
            }


            /*
             * Replace values used by both situations
             */
            $produce_code = str_replace("VIDEOFILE", $videoname, $produce_code);
            $produce_code = str_replace("IMAGEFILE", $thumbname, $produce_code);
            $produce_code = str_replace("DIVID", $div_ID, $produce_code);


            // If key is set, use it and append it to the whole thing for output.
            if (isset($filter->settings['soc_jwplayer_key_displayed'])) {
                $jwkey_code = str_replace("JWKEY", trim($filter->settings['soc_jwplayer_key_displayed']), SOCJWPLAYERCODEKEY);
                $produce_code = trim($jwkey_code) . trim($produce_code);
            }

            // include REMOTE JS Player.
       
            if (isset($filter->settings['soc_jwplayer_playerurl_external']) && (strlen($filter->settings['soc_jwplayer_playerurl_external']) > 5)) {
                drupal_add_js($filter->settings['soc_jwplayer_playerurl_external'], 'external');
            } else {
                drupal_add_js(DEFAULT_JWPLAYER_URL, 'external');
            }




            $text = str_replace($fullmatch, $produce_code, $text);

        }

    }


    return $text;

}

/**
 * The settings function. The only option to currently set is the JW key.
 *
 */
function _jwinputfilter_settings($form, &$form_state, $filter, $format, $defaults)
{
    $filter->settings += $defaults;

    // default to 7.3 if nothing selected
    if (is_null($filter->settings['soc_jwplayer_playerurl_external']) ) {
        $filter->settings['soc_jwplayer_playerurl_external'] = DEFAULT_JWPLAYER_URL;
    }

    // key
    $settings['soc_jwplayer_key_displayed'] = array(
        '#type' => 'textfield',
        '#title' => t('JWPlayer Input Filter Settings'),
        '#default_value' => $filter->settings['soc_jwplayer_key_displayed'],
        '#maxlength' => 1024,
        '#description' => t('The key to use in jwplayer.key=#### javascript embeded to page.'),
    );

    // external player
    $settings['soc_jwplayer_playerurl_external'] = array(
        '#type' => 'textfield',
        '#title' => t('External JS call'),
        '#default_value' => $filter->settings['soc_jwplayer_playerurl_external'],
        '#maxlength' => 1024,
        '#description' => t('Use a URL in this fashion <code>//ssl.p.jwpcdn.com/player/v/7.3.0/jwplayer.js</code>. <b>This value will override the local option.</b>'),
    );

    // default thumb
    $settings['soc_jwplayer_default_thumb_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Default Logo or Thumbnail'),
        '#default_value' => $filter->settings['soc_jwplayer_default_thumb_url'],
        '#maxlength' => 1024,
        '#description' => t('If no thumbnail is given, use this image. For example, something akin to "<code>sites/default/files/images/Logo.png</code>"  or a full URL such as "<code>https://server.com/images/logo.png</code>". <b>It is okay</b> to use starting or ending slashes. '),
    );



    return $settings;
}



